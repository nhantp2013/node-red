[
    {
        "id": "91bc373f1990b000",
        "type": "tab",
        "label": "3.4.10 OBS_ReailTime_Data",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "1e70cdc1b976668f",
        "type": "ui_template",
        "z": "91bc373f1990b000",
        "group": "3d882eae.376e82",
        "name": "",
        "order": 6,
        "width": "22",
        "height": "25",
        "format": "<!doctype html>\n<html lang=\"en\">\n\n<head>\n    <title>Title</title>\n    <!-- Required meta tags -->\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n\n    <!-- Bootstrap CSS -->\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        integrity=\"sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T\" crossorigin=\"anonymous\">\n    <script src=\"https://code.jquery.com/jquery-3.6.0.js\"\n        integrity=\"sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk=\" crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdn.jsdelivr.net/npm/fflate/umd/index.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/pako/2.0.4/pako.min.js\"\n        integrity=\"sha512-EAKzSKex+PXC0U9OG13r1059ysjrjkJEpZoONCnZa0mBROY28iBOOxZSErUVw1LzLr2+U5PhR7zPCPKidUVJqg==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\"></script>\n\n    <style>\n        .formInput {\n            position: absolute;\n            top: 0%;\n            /* left: 50%; */\n            /* margin-top: -100px; */\n            /* margin-left: -250px; */\n            width: 100%;\n            height: 200px;\n            border: 4px dashed rgb(92, 89, 89);\n            transition: 0.4s;\n        }\n\n        .formInput:hover {\n            background-color: rgb(205 226 242);\n        }\n\n        .formInput #textHolder {\n            width: 100%;\n            height: 100%;\n            text-align: center;\n            line-height: 170px;\n            color: rgb(92, 89, 89);\n            font-family: Arial;\n            background-color: unset;\n        }\n\n        .formInput input {\n            position: absolute;\n            margin: 0;\n            padding: 0;\n            width: 100%;\n            height: 100%;\n            outline: none;\n            opacity: 0;\n        }\n\n        .formInput button {\n            margin: 0;\n            color: #fff;\n            background: #16a085;\n            border: none;\n            width: 508px;\n            height: 35px;\n            margin-top: -20px;\n            margin-left: -4px;\n            border-radius: 4px;\n            border-bottom: 4px solid #117A60;\n            transition: all .2s ease;\n            outline: none;\n        }\n\n        .formInput button:hover {\n            background: #149174;\n            color: #0C5645;\n        }\n\n        .formInput button:active {\n            border: 0;\n        }\n\n        .drag-file {\n            position: relative;\n            width: 100;\n            height: 200px;\n        }\n\n        .my-custom-scrollbar {\n            position: relative;\n            height: 200px;\n            overflow: auto;\n        }\n\n        .table-wrapper-scroll-y {\n            display: block;\n        }\n\n        .or-seperator {\n            margin-top: 20px;\n            text-align: center;\n            border-top: 1px solid #ccc;\n        }\n\n        .or-seperator i {\n            cursor: pointer;\n            padding: 0 10px;\n            background: #f7f7f7;\n            position: relative;\n            top: -11px;\n            z-index: 1;\n            transition: 0.4s;\n\n        }\n\n        .or-seperator i:hover {\n            background: #dbdada;\n\n\n        }\n\n        .or-seperator i.arrow {\n            padding: 0 10px;\n            background: #f7f7f7;\n            position: relative;\n            top: -11px;\n            z-index: 1;\n\n        }\n\n\n        .error-border {\n            border-color: red;\n        }\n\n        .error-color {\n            color: red;\n        }\n\n        #publishTimeError {\n            top: -15px;\n            z-index: 3;\n        }\n\n        .help-block {\n            display: block;\n            margin-top: 2px;\n            margin-bottom: 10px;\n            color: #a94442;\n            font-size: 15px;\n        }\n\n        .form-mqtt {\n            border: 1px solid black;\n        }\n\n        #selectTopic {\n            border: 1px dashed #ccc;\n            display: flex;\n            justify-content: center;\n        }\n\n        #selectTopic i {\n            cursor: pointer;\n            padding: 0 10px;\n            background: white;\n            position: absolute;\n            top: -11px;\n            z-index: 1;\n            transition: 0.4s;\n        }\n\n        @media (min-width: 576px) {\n            #selectTopic {\n\n                padding: 10px 0 10px 0;\n\n            }\n        }\n\n        @media (min-width: 768px) {\n            /* .select {\n               width: 50%;\n           } */\n        }\n\n        @media (min-width: 200px) {\n            #selectTopic {\n\n                padding: 10px 0 10px 0;\n\n            }\n        }\n\n        /* div.wrap {\n            width: 500px;\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            vertical-align: middle;\n        } */\n\n        div.wrap div {\n            position: relative;\n        }\n\n\n        div.wrap div label {\n\n            position: absolute;\n            top: 0;\n            font-size: 15px;\n            margin: 10px;\n            padding: 0 10px;\n            -webkit-transition: top .2s ease-in-out,\n                font-size .2s ease-in-out;\n            transition: top .2s ease-in-out,\n                font-size .2s ease-in-out;\n        }\n\n        div.wrap div input[type=number] {\n            width: 100%;\n            padding: 5px;\n\n            /* font-size: 20px; */\n\n\n        }\n\n        div.wrap div input[type=number]:focus {\n            outline: none;\n        }\n\n        .active {\n            top: -25px !important;\n            font-size: 12px !important;\n            background-color: white;\n        }\n\n\n        /*.optional-config {*/\n        /*    overflow: hidden;*/\n        /*    display: none;*/\n        /*    transform: translateY(-100%);*/\n        /*    transition: transform 0.3s ease-out;*/\n        /*}*/\n\n        /*.optional-config.open {*/\n        /*    display: flex;*/\n        /*    pointer-events: visible;*/\n        /*    opacity: 1;*/\n        /*    transform: translateY(0);*/\n        /*}*/\n    </style>\n</head>\n\n<body>\n    <div class=\"container\">\n\n        <!-- <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"or-seperator\">\n                    <i id=\"mqtt-config-lable\">MQTT Config\n                        <span class=\"arrow\">&#8659;</span>\n                    </i>\n\n\n                </div>\n            </div>\n        </div>\n        <div class=\"row \" style=\"display: none;\" id=\"mqtt-config-form\">\n            <div class=\"col-sm-12 justify-content-center\">\n                <form class=\"form-inline\" action=\"/action_page.php\">\n                    <label for=\"email\" class=\"mr-sm-2\">User name: </label>\n                    <input type=\"email\" class=\"form-control mb-2 mr-sm-2\" value=\"admin\" placeholder=\"User name\"\n                        id=\"mqttEmail\">\n                    <label for=\"pwd\" class=\"mr-sm-2\">Password:</label>\n                    <input type=\"password\" class=\"form-control mb-2 mr-sm-2\" value=\"admin\" placeholder=\"Password\"\n                        id=\"mqttPassWord\">\n\n                </form>\n            </div>\n        </div> -->\n\n        <!-- test file -->\n        <!-- \n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"or-seperator\">\n                    <i id=\"Test-config-lable\">Test Config\n                        <span class=\"arrow\">&#8659;</span>\n                    </i>\n\n\n                </div>\n            </div>\n        </div>\n        <div class=\"row pb-5\" style=\"display: none;\" id=\"test-form\">\n            <div class=\"col-sm-6 border-right border-dark \">\n                <h3 class=\"text-center\">Choose File Config</h3>\n                <div class=\"row wrap mt-3\">\n                    <div class=\"col-sm-6\">\n                        <label class=\"active\" for=\"signalCodeColumnIndex\">signalCodeColumnIndex</label>\n                        <input id=\"signalCodeColumnIndex\" type=\"number\" />\n                    </div>\n                    <div class=\"col-sm-6\">\n                        <label class=\"active\" for=\"bitLengthColumnIndex\">bitLengthColumnIndex</label>\n                        <input id=\"bitLengthColumnIndex\" type=\"number\" />\n                    </div>\n\n                    <div class=\"col-sm-6 mt-5\">\n                        <label class=\"active\" for=\"valueTypeColumnIndex\">valueTypeColumnIndex</label>\n                        <input id=\"valueTypeColumnIndex\" type=\"number\" />\n                    </div>\n                    <div class=\"col-sm-6 mt-5\">\n                        <label class=\"active\" for=\"scalingFactorColumnIndex\">scalingFactorColumnIndex</label>\n                        <input id=\"scalingFactorColumnIndex\" type=\"number\" />\n                    </div>\n                </div>\n                <div class=\"col-sm-12 mt-5\">\n                    <span>Select local CSV File:</span>\n                    <input accept=\".csv\" id=\"csv\" type=\"file\">\n                </div>\n\n\n            </div>\n\n            <div class=\"col-sm-6 \">\n                <h3 class=\"text-center\">Choose File Data</h3>\n                <div class=\"row wrap mt-3\">\n                    <div class=\"col-sm-6\">\n                        <label class=\"active\" for=\"rtdSignalCodeColumnIndex\">SignalCodeColumnIndex</label>\n                        <input id=\"rtdSignalCodeColumnIndex\" type=\"number\" />\n                    </div>\n                    <div class=\"col-sm-6\">\n                        <label class=\"active\" for=\"rtdStartDataRowIndex\">StartDataRowIndex</label>\n                        <input id=\"rtdStartDataRowIndex\" type=\"number\" />\n                    </div>\n\n                    <div class=\"col-sm-12 mt-5\">\n\n                        <label class=\"active\" for=\"rtdStartTimeColumnIndex\">StartTimeColumnIndex</label>\n                        <input id=\"rtdStartTimeColumnIndex\" type=\"number\" />\n\n                    </div>\n\n                </div>\n                <div class=\"col-sm-12 mt-5\">\n                    <span>Select local Excel File:</span>\n                    <input id=\"excel\" onclick=\"this.value=null;\"\n                        accept=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\"\n                        type=\"file\">\n\n                </div>\n\n\n            </div>\n\n\n            <div class=\"col-sm-12 mt-3\">\n\n                <button id=\"compare\" class=\"btn btn-info w-100\">Compare</button>\n            </div>\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\" id=\"showErrorList\">\n\n\n            </div>\n        </div> -->\n        <div class=\"row mt-5 \">\n\n            <div class=\"col-sm-12\">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">Config lenth</span>\n                    </div>\n                    <input required=\"\" type=\"number\" class=\"form-control\" id=\"configLenth\"\n                        aria-describedby=\"basic-addon3\">\n                </div>\n            </div>\n            <div class=\"col-sm-12 \">\n                <div class=\"drag-file\">\n                    <form class=\"formInput\" action=\"upload.php\" method=\"POST\">\n                        <input type=\"file\" id=\"file\">\n                        <div id=\"textHolder\">Drag your json file here or click in this area.</div>\n                    </form>\n                </div>\n\n            </div>\n\n        </div>\n\n        <div class=\"row mt-3\">\n            <div class=\"col-sm-12\">\n                <div class=\"table-wrapper-scroll-y my-custom-scrollbar\">\n\n                    <table class=\"table table-bordered table-striped mb-0\">\n                        <thead id=\"header-fixed\" class=\"thead-dark\">\n                            <tr class=\"tableHeader\">\n                                <th scope=\"col\">#</th>\n                                <th scope=\"col\">timeStamp</th>\n                                <th scope=\"col\">Value map</th>\n                            </tr>\n                        </thead>\n                        <tbody id=\"tableTemplate\">\n\n                        </tbody>\n                    </table>\n\n                </div>\n            </div>\n        </div>\n        <div class=\"row mt-5\">\n            <div class=\"col-md-6 col-sm-12 col-lg-3 pt-3 \">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">TrainID</span>\n                    </div>\n                    <input required=\"\" type=\"text\" class=\"form-control\" id=\"trainId\" aria-describedby=\"basic-addon3\">\n                </div>\n\n            </div>\n            <div class=\"col-md-6 col-sm-12 col-lg-5 col-12 \" id=\"selectTopic\">\n                <i id=\"\">Topic\n\n                </i>\n                <div class=\"form-check form-check-inline\">\n                    <input class=\"form-check-input\" checked type=\"radio\" name=\"radioName\" id=\"data-fast\"\n                        value=\"/real-time/data-fast\">\n                    <label class=\"form-check-label font-weight-bold\" for=\"data-fast\">/real-time/data-fast</label>\n                </div>\n                <div class=\"form-check form-check-inline\">\n\n                    <input class=\"form-check-input\" type=\"radio\" name=\"radioName\" id=\"data-slow\"\n                        value=\"/real-time/data-slow\">\n                    <label class=\"form-check-label font-weight-bold\" for=\"data-slow\">/real-time/data-slow</label>\n                </div>\n            </div>\n\n            <div class=\"col-md-6 col-sm-6 col-lg-2 col-6 pt-3 \">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend select\">\n                        <label class=\"input-group-text\" for=\"QOS\">QOS</label>\n\n                    </div>\n                    <select disabled class=\"custom-select\" id=\"selectQOS\">\n                        <option selected value=\"0\"> 0</option>\n                        <option value=\"1\"> 1</option>\n                        <option value=\"2\"> 2</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-6 col-sm-6 col-lg-2 col-6 pt-3 \">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <label class=\"input-group-text\" for=\"Retain\">Retain</label>\n                    </div>\n                    <select disabled class=\"custom-select\" id=\"selectRetain\">\n                        <option value=\"true\"> true</option>\n                        <option selected value=\"false\"> false</option>\n                    </select>\n                </div>\n            </div>\n\n        </div>\n\n        <div class=\"row\">\n            <div class=\"col-sm-12\">\n                <div class=\"or-seperator\">\n                    <i id=\"config-label\">Optional Config\n                        <span class=\"arrow\">&#8659;</span>\n                    </i>\n\n\n                </div>\n            </div>\n        </div>\n\n        <div class=\"row optional-config\" style=\"display: none;\">\n            <div class=\"col-md-5 col-sm-12 col-lg-6 col-12 pt-3\">\n                <div style=\"position: absolute\" id=\"publishTimeError\" class=\"help-block\">\n                </div>\n                <span class=\"focus-input\"></span>\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">Time publish (ms)</span>\n                    </div>\n                    <input min=\"200\" type=\"number\" value=\"200\" type=\"text\" class=\"form-control\" id=\"publishTime\"\n                        aria-describedby=\"basic-addon3\">\n                </div>\n            </div>\n            <div class=\"col-md-4 col-sm-12 col-lg-4 col-12 pt-3\">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <label class=\"input-group-text\" for=\"Current-time\">Current time</label>\n\n                    </div>\n                    <select class=\"custom-select\" id=\"selectRealTime\">\n                        <option value=\"true\"> On</option>\n                        <option selected value=\"false\"> Off</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-3 col-sm-12 col-lg-2 col-12 pt-3\">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <label class=\"input-group-text\" for=\"Loop\">Loop</label>\n\n                    </div>\n                    <select class=\"custom-select\" id=\"selectLoop\">\n                        <option value=\"true\"> On</option>\n                        <option selected value=\"false\"> Off</option>\n                    </select>\n                </div>\n\n            </div>\n        </div>\n        <div class=\"row\">\n            <button id=\"publish\" type=\"button\" class=\"btn btn-success w-100\">Publish Realtime Data</button>\n        </div>\n\n    </div>\n\n    <!-- publish real-time status -->\n    <div class=\"container mt-5\">\n        <div class=\"row or-seperator\" style=\" justify-content: center;\">\n            <i id=\"publish-status-label\">Publish Realtime Status\n                <span class=\"arrow\">&#8659;</span>\n            </i>\n\n        </div>\n\n    </div>\n    <div class=\"container publish-status-form pt-3\" style=\"border-left: 1px solid #ccc;\n    border-right: 1px solid #ccc; \n    margin-top: -25px;\n   /* display: none; */\n   \">\n        <!-- show status when publish realtime status -->\n        <div class=\"row\">\n            <div class=\"col-12\">\n                <div class=\"alert  text-center\" id=\"realtime-status-notification\" style=\"visibility: hidden;\"\n                    role=\"alert\">\n                    text hold\n                </div>\n            </div>\n        </div>\n        <!-- show status when publish realtime status -->\n        <div class=\"row \">\n            <div class=\"col-md-6 col-sm-12 col-lg-3 pt-2 \">\n                <div style=\"position: absolute; display:none;\" id=\"publishTimeError\" class=\"help-block\">\n                    Requrie</div>\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">TrainID</span>\n                    </div>\n                    <input required=\"\" type=\"text\" class=\"form-control\" id=\"trainId-realtime-status\"\n                        aria-describedby=\"basic-addon3\">\n                </div>\n\n            </div>\n            <div class=\"col-md-6 col-sm-12 col-lg-5 col-12 pt-3  \">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">topic</span>\n                    </div>\n                    <input required disabled type=\"text\" value=\"/real-time/status\" class=\"form-control\"\n                        id=\"topic-realtime-status\" aria-describedby=\"basic-addon3\">\n                </div>\n\n            </div>\n\n            <div class=\"col-md-6 col-sm-6 col-lg-2 col-6 pt-3 \">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend select\">\n                        <label class=\"input-group-text\" for=\"QOS\">QOS</label>\n\n                    </div>\n                    <select disabled class=\"custom-select\" id=\"selectQOS-realtime-status\">\n                        <option value=\"0\"> 0</option>\n                        <option selected value=\"1\"> 1</option>\n                        <option value=\"2\"> 2</option>\n                    </select>\n                </div>\n            </div>\n            <div class=\"col-md-6 col-sm-6 col-lg-2 col-6 pt-3 \">\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <label class=\"input-group-text\" for=\"Retain\">Retain</label>\n                    </div>\n                    <select disabled class=\"custom-select\" id=\"selectRetain-realtime-status\">\n                        <option value=\"true\"> true</option>\n                        <option selected value=\"false\"> false</option>\n                    </select>\n                </div>\n            </div>\n        </div>\n        <!-- payload real-time status -->\n        <div class=\"row pt-3 pb-3\">\n            <div class=\"col-md-6 col-sm-6 col-lg-3 col-6 pt-3\">\n                <span class=\"focus-input\"></span>\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <span class=\"input-group-text\" id=\"basic-addon3\">ts</span>\n                    </div>\n                    <input value=\"Auto generate from system\" disabled type=\"text\" class=\"form-control\"\n                        aria-describedby=\"basic-addon3\">\n                </div>\n            </div>\n            <div class=\"col-md-6 col-sm-6 col-lg-4 col-6 pt-3\">\n                <div style=\"position: absolute; display:none;\" id=\"publishTimeError\" class=\"help-block\">\n                    Requrie</div>\n                <div class=\"input-group mb-3\">\n                    <div class=\"input-group-prepend\">\n                        <label class=\"input-group-text\" for=\"Current-time\">Train Model Revision</label>\n\n                    </div>\n                    <input type=\"number\" class=\"form-control\" id=\"train-model-revision-input\"\n                        aria-describedby=\"basic-addon3\">\n                </div>\n            </div>\n            <div class=\"col-md-12 col-sm-12 col-lg-5 col-12 pt-3\">\n                <div style=\"position: absolute; display:none;\" id=\"publishTimeError\" class=\"help-block\">\n                    Requrie</div>\n                <div class=\"input-group mb-3 \">\n                    <div class=\"input-group-prepend\">\n                        <label class=\"input-group-text\" for=\"Current-time\">trainModelTimestamp</label>\n\n                    </div>\n                    <input type=\"text\" class=\"form-control \" placeholder=\"YYYY-MM-dd HH:mm:ss.ms\" id=\"train-model-timestamp-input\"\n                        aria-describedby=\"basic-addon3\">\n                </div>\n            </div>\n        </div>\n        <div class=\"row\">\n            <button id=\"publish-realtime-status\" type=\"button\" class=\"btn btn-success w-100\">Publish Realtime\n                Status</button>\n        </div>\n    </div>\n    <!-- Optional JavaScript -->\n    <!-- jQuery first, then Popper.js, then Bootstrap JS -->\n    <script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\"\n        integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\"\n        crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n        integrity=\"sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1\"\n        crossorigin=\"anonymous\"></script>\n    <script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n        integrity=\"sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM\"\n        crossorigin=\"anonymous\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/jszip.js\"></script>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.8.0/xlsx.js\"></script>\n\n    <!-- ajax -->\n    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\"></script>\n    <script type=\"text/javascript\">\n\n        var configLabel = $(\"#config-label\");\n\n        var classOptionalConfig = $(\".optional-config\");\n\n        // MQTT elemnet\n        var formMQTTConfig = $(\"#mqtt-config-form\");\n        var labelMQTTConfig = $(\"#mqtt-config-lable\");\n\n        // Real time status element\n        var publishStatusLable = $(\"#publish-status-label\");\n        var publishStatusForm = $(\".publish-status-form\");\n        var realtimeStatusNotification = $(\"#realtime-status-notification\");\n\n        var QOSRealTimeStatusSelectId = $(\"#selectQOS-realtime-status\");\n        var retainRealTimeStatusSelectId = $(\"#selectRetain-realtime-status\");\n\n        var trainModelRevisionInputId = $(\"#train-model-revision-input\");\n        var trainModelTimestampInputId = $(\"#train-model-timestamp-input\");\n        var trainIdRealtimeStausInputId = $(\"#trainId-realtime-status\");\n        var topicReRealtimeStausInputId = $(\"#topic-realtime-status\");\n\n        var publishRealtimeStatusButton = $(\"#publish-realtime-status\");\n\n        // constant value\n        var TIME_OUT_ERR_AS_MS = 3000;\n        var TIME_OUT_SUCCSESS_AS_MS = 3000;\n        var CLASS_ERROR_BORDER = \"error-border\";\n        var CLASS_ALERT_DANGER = \"alert-danger\";\n        var CLASS_ALERT_SUCCESS = \"alert-success\";\n\n        var MIN_VALUE_DATA_FAST = 200;\n        var MAX_VALUE_DATA_FAST = 1000;\n\n        var MIN_VALUE_DATA_SLOW = 1001;\n        var MAX_VALUE_DATA_SLOW = 360000;\n\n\n        var listPayload = [];\n        var key = \"payLoad\";\n        var configLength = localStorage.getItem(\"configLength\") || -1;\n\n        var selectedTopic = \"/real-time/data-fast\";// default topic\n        var currentSelectTopic = \"data-fast\";\n\n        var errorPublishTime = \"\";\n\n        var classOptionalConfigOpen = $(\".optional-config .open\");\n\n\n        var QOSValue = $(\"#selectQOS\");\n        var retainValue = $(\"#selectRetain\");\n        var loopValue = $(\"#selectLoop\");\n        var trainId = $(\"#trainId\");\n        var configLengthId = $(\"#configLenth\");\n        var isRealTime = $(\"#selectRealTime\");\n        var publishTime = $(\"#publishTime\");\n        var mqttUser = $(\"#mqttUser\");\n        var mqttPassWord = $(\"mqttPassWord\");\n\n        var fileInput = $('#file')\n        var fileName = $('#fileName')\n        var formInput = $(\".formInput\");\n\n\n        var textHolder = $('#textHolder');\n        var publishMessage = $(\"#publish\");\n        var classTableHeader = $(\".tableHeader\");\n\n\n        //=========================== ULTIL AREA ======================================>\n\n        function bytesToSize(bytes) {\n            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\n            if (bytes == 0) return '0 Byte';\n            var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\n            return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\n        }\n\n        var decodeBase64 = (base64Code) => {\n            let buff = new Buffer(base64Code, 'base64');\n            let text = buff.toString('ascii');\n            return text;\n        }\n        /**\n                * decode base64 to gzip format\n                * @param {*} base64 \n                * @returns buffer array of gzip format\n                */\n        function _base64ToArrayBuffer(base64) {\n            var binary_string = window.atob(base64);\n            var len = binary_string.length;\n            var bytes = new Int8Array(len);\n            for (var i = 0; i < len; i++) {\n                bytes[i] = binary_string.charCodeAt(i);\n            }\n\n            return bytes;\n\n        }\n\n        function uncompress(base64data) {\n            var compressData = window.atob(base64data);\n            var compressData = compressData.split('').map(function (e) {\n                return e.charCodeAt(0);\n            });\n            binData = new Uint8Array(compressData);\n            let data = pako.inflate(binData);\n            // covert unit8 to int 8\n            var int8Array = new Int8Array(data.buffer.slice(data.byteOffset), 0, data.length);\n            return int8Array;\n        }\n\n\n        /**\n         * Conver dec to binary\n         * @param {*} dec  decimal number\n         * @returns \n         */\n        function dec2bin(dec) {\n            return (dec >>> 0).toString(2);\n        }\n\n        /**\n         * get value map as binary\n         * @param {*} arrayBuffer \n         * @param {*} lengthConfig length of record config file\n         * @returns binary value map\n         */\n        function getValueMap(arrayBuffer, lengthConfig) {\n            const regexValidateNumber = /\\D/.test(lengthConfig);\n            if (regexValidateNumber == true) { // lengthConfig is not number\n                throw new Error(lengthConfig + \" is not number\")\n            }\n            // convert length config to byte format\n            const lengthOfValueMap = (lengthConfig % 8 == 0)\n                ? parseInt(lengthConfig / 8)\n                : parseInt(lengthConfig / 8) + 1;\n\n            var valueMap = [];\n\n            //shift 6 byte first\n            for (let i = 7; i < lengthOfValueMap + 7; i++) {\n                let value = \"00000000\" + (arrayBuffer[i] >>> 0).toString(2).substr(-8);\n                value = value.slice(-8); // get just 8 bit signed\n                value = value // Big Endian\n                valueMap.push(value);\n\n            }\n            return valueMap;\n        }\n\n        var showInvalidInput = (field, errorContent) => {\n            $(field).text(errorContent);\n        }\n        var hideInvalidInput = (field) => {\n            $(field).text(\"\");\n        }\n\n        //=========================== END ULTIL AREA ======================================>\n\n\n        //=========================== HANDLE AREA ======================================>\n\n        var handleSelectTopic = function () {\n            hideInvalidInput(\"#publishTimeError\");// clear error\n            errorPublishTime = \"\";\n            var selectField = $('input[name=radioName]:checked', '#selectTopic');\n            currentSelectTopic = selectField.attr(\"id\")\n\n            selectedTopic = selectField.val();\n            if (currentSelectTopic == \"data-slow\") {\n                publishTime.attr({\n                    max: MAX_VALUE_DATA_SLOW,\n                    min: MIN_VALUE_DATA_SLOW\n                });\n                publishTime.val(MIN_VALUE_DATA_SLOW)\n            } else {\n                publishTime.attr({\n                    max: MAX_VALUE_DATA_FAST,\n                    min: MIN_VALUE_DATA_FAST\n                });\n                publishTime.val(MIN_VALUE_DATA_FAST)\n            }\n        }\n\n        var handlePublishTime = (e) => {\n            let value = parseInt(e.target.value) || 0;\n\n            if (currentSelectTopic == \"data-fast\") {\n                if (value < MIN_VALUE_DATA_FAST || value > MAX_VALUE_DATA_FAST) {\n                    errorPublishTime = `Time data fast must be ${MIN_VALUE_DATA_FAST} ms or ${MAX_VALUE_DATA_FAST} ms`;\n                    showInvalidInput(\"#publishTimeError\", errorPublishTime);\n\n                } else {\n                    errorPublishTime = \"\";\n                    hideInvalidInput(\"#publishTimeError\");\n                }\n            }\n\n            if (currentSelectTopic == \"data-slow\") {\n                errorPublishTime = `Time data slow must be between  ${MIN_VALUE_DATA_SLOW} ms and  ${MAX_VALUE_DATA_SLOW} ms`;\n                if (value < MIN_VALUE_DATA_SLOW || value > MAX_VALUE_DATA_SLOW) {\n                    showInvalidInput(\"#publishTimeError\", errorPublishTime);\n                } else {\n                    errorPublishTime = \"\";\n                    hideInvalidInput(\"#publishTimeError\");\n                }\n            }\n        }\n\n        function handleConfigLengthChange() {\n\n            var value = $(this).val();\n\n            configLength = value;\n\n        }\n\n        var handleReadFileDataJson = function (event) {\n            if (configLength <= 0) // if config length is not set\n            {\n                // to do with config length is not set\n                configLengthId.addClass(CLASS_ERROR_BORDER);\n                setTimeout(() => {\n                    configLengthId.removeClass(CLASS_ERROR_BORDER);\n                }, TIME_OUT_ERR_AS_MS);\n\n            } else {\n                localStorage.setItem(\"configLength\", configLength);\n                var file = fileInput[0].files[0];\n\n                if (file) {\n                    textHolder.text(file.name + \",\" + bytesToSize(file.size));\n                    fileName.text(file ? file.name : '')\n                    var reader = new FileReader();\n\n                    if (file.type == \"application/json\") { // json only\n                        formInput.removeClass(CLASS_ERROR_BORDER);\n\n                        reader.readAsBinaryString(file);\n                        reader.onload = function () {\n                            listPayload = JSON.parse(reader.result)\n                            // scope.listPayload = listPayload;\n                            textHolder.append(\",\" + listPayload.length + (listPayload.length > 1 ? \" Records\" : \" Record\"));\n                            let tableHeader = `<th scope=\"col\">#</th>`;\n                            let keysInJsonFile = Object.keys(listPayload[0]);\n                            key = keysInJsonFile[1];\n                            // put key to header table\n                            // keysInJsonFile.forEach(c => {\n                            //     tableHeader += `<th scope=\"col\">${c}</th>`\n                            // })\n\n                            // classTableHeader.html(tableHeader);\n\n                            //put data to table\n                            let tableTemplate = \"\";\n                            listPayload.forEach((c, i) => {\n                                tableTemplate += `\n                                                <tr >\n                                                    <td scope=\"row\">${i + 1}</td>\n                                                    <th >${c[keysInJsonFile[0]]}</th>\n                                                    <td>${(getValueMap(uncompress(c[keysInJsonFile[1]]), configLength))}</td>\n                                                </tr> `;\n                            })\n\n                            $(\"#tableTemplate\").html(tableTemplate);\n                        };\n                        reader.onerror = function () {\n                            console.log('Error while reading files');\n                        };\n                    } else {\n                        // todo with file is not json file\n                        listPayload = [];\n                        $(\"#tableTemplate\").html(\"\");\n                        formInput.addClass(CLASS_ERROR_BORDER);\n                        textHolder.append(\"<span class ='error-color'> (Json File Only)</span>\")\n                    }\n\n                } else {\n                    // todo with file is not exist\n\n\n                }\n            }\n\n\n        };\n\n\n        //<=========================== END HANDLE AREA ======================================>\n\n        (function (scope) {\n            var handlePublishMessage = function (e) {\n                if (listPayload.length === 0 || trainId.val().length === 0 || errorPublishTime.length !== 0) {\n                    if (listPayload.length === 0) { // \n                        formInput.addClass(CLASS_ERROR_BORDER);\n                        setTimeout(() => {\n                            formInput.removeClass(CLASS_ERROR_BORDER);\n                        }, TIME_OUT_ERR_AS_MS);\n                    }\n                    if (trainId.val().length === 0) {\n                        trainId.addClass(CLASS_ERROR_BORDER);\n                        setTimeout(() => {\n                            trainId.removeClass(CLASS_ERROR_BORDER);\n                        }, TIME_OUT_ERR_AS_MS);\n                    }\n                    if (errorPublishTime.length !== 0) {\n                        showInvalidInput(\"#publishTimeError\", errorPublishTime);\n                        publishTime.addClass(CLASS_ERROR_BORDER);\n                        $(\".or-seperator\").addClass(CLASS_ERROR_BORDER);\n                        setTimeout(() => {\n                            publishTime.removeClass(CLASS_ERROR_BORDER);\n                            $(\".or-seperator\").removeClass(CLASS_ERROR_BORDER);\n                            hideInvalidInput(\"#publishTimeError\");\n\n                        }, 5000);\n                    }\n\n                } else {\n                    formInput.removeClass(CLASS_ERROR_BORDER);\n                    trainId.removeClass(CLASS_ERROR_BORDER);\n                    publishTime.removeClass(CLASS_ERROR_BORDER);\n                    hideInvalidInput(\"#publishTimeError\");\n                    let mqtt = {\n                        username: mqttUser.val() || \"admin\",\n                        password: mqttPassWord.val() || \"admin\"\n                    }\n\n                    scope.send({\n                        payload: listPayload,\n                        topic: trainId.val() + selectedTopic,\n                        qos: QOSValue.val(), retain: retainValue.val() === 'true',\n                        loop: loopValue.val() === 'true',\n                        key: key,\n                        isRealTime: isRealTime.val() === 'true',\n                        timePublish: parseInt(publishTime.val()),\n                        // mqtt:mqtt\n                    });\n\n                }\n\n            }\n\n            var handlePublishRealtimeStatus = () => {\n                // check user fill input\n                // if (trainIdRealtimeStausInputId.val().length == 0\n                //     || trainModelRevisionInputId.val().length == 0\n                //     || trainModelTimestampInputId.val().length == 0\n                //     || trainIdRealtimeStausInputId.val().length == 0) {\n\n\n                // } else {\n\n                // }\n\n                var errorFlag = false; // true if user input leave any field\n                $(\".publish-status-form :input[type=text], :input[type=number]\").each(function () {\n                    var value = $(this).val();\n                    var id = $(this).attr(\"id\");\n                    if (!value) {\n                        // display error\n                        $(\"#\" + id).addClass(\"error-border\");\n                        $(\"#\" + id).parent().siblings(\"div#publishTimeError\").css(\"display\", \"\");\n                        errorFlag = true;\n\n                    }\n                    // if value exsist\n                    if (value) {\n                        // hide erorr\n                        $(\"#\" + id).removeClass(\"error-border\");\n                        $(\"#\" + id).parent().siblings(\"div#publishTimeError\").css(\"display\", \"none\");\n                    }\n                })\n                if (errorFlag == false) {\n                    // to do publish message\n\n                    var messageRealtimeStatus = {\n                        qos: QOSRealTimeStatusSelectId.val(),\n                        retain: retainRealTimeStatusSelectId.val() === 'true',\n                        topic: trainIdRealtimeStausInputId.val() + topicReRealtimeStausInputId.val(),\n                        payload: {\n                            trainModelRevision: trainModelRevisionInputId.val(),\n                            trainModelTimestamp: trainModelTimestampInputId.val()\n                        }\n                    }\n\n                    $.ajax({\n                        url: \"/realtime-status\",\n                        type: \"POST\",\n                        data: messageRealtimeStatus,\n                        cache: false,\n                        success: function (res) {\n                            if (res.status == false) {\n                                realtimeStatusNotification.addClass(CLASS_ALERT_DANGER);\n                                realtimeStatusNotification.css(\"visibility\", \"visible\");\n                                console.log(res.error);\n                                realtimeStatusNotification.text(res.error.message);\n                            }else {\n                                realtimeStatusNotification.addClass(CLASS_ALERT_SUCCESS);\n                                realtimeStatusNotification.css(\"visibility\", \"visible\");\n                                realtimeStatusNotification.text(\"Publish realtime status success\");\n                                setTimeout(() => {\n                                    realtimeStatusNotification.css(\"visibility\",\"hidden\");\n                                }, TIME_OUT_SUCCSESS_AS_MS);\n                            }\n\n                        }\n                    });\n                }\n\n\n            }\n\n\n\n            // scope.clear = function () {\n            // \tfileInput.val('').trigger('change')\n            // }\n\n            configLengthId.on(\"input\", handleConfigLengthChange)\n\n            fileInput.on('change', handleReadFileDataJson);\n            // check user change topic \n            $('#selectTopic input').on('change', handleSelectTopic);\n\n            // check user input publish time \n            publishTime.on(\"change keyup paste\", handlePublishTime);\n\n            publishMessage.on(\"click\", handlePublishMessage)\n\n            publishRealtimeStatusButton.on(\"click\", handlePublishRealtimeStatus);\n\n        })(scope);\n\n    </script>\n\n    <script>\n        var idShowErrorList = $(\"#showErrorList\");\n        var fileInputCSV = document.getElementById(\"csv\");\n        var fileInputExcel = document.getElementById(\"excel\");\n        var labelTestConfig = $(\"#Test-config-lable\");\n\n        var idSignalCodeColumnIndex = $(\"#signalCodeColumnIndex\");\n        var idBitLengthColumnIndex = $(\"#bitLengthColumnIndex\");\n        var idValueTypeColumnIndex = $(\"#valueTypeColumnIndex\");\n        var idScalingFactorColumnIndex = $(\"#scalingFactorColumnIndex\");\n\n        var idRtdSignalCodeColumnIndex = $(\"#rtdSignalCodeColumnIndex\");\n        var idRtdStartDataRowIndex = $(\"#rtdStartDataRowIndex\");\n        var idRtdStartTimeColumnIndex = $(\"#rtdStartTimeColumnIndex\");\n\n\n        var testFormId = $(\"#test-form\");\n\n        // check realtime datas\n        var configData = [], realTimeData = [];\n\n        // #from config.csv\n        var signalCodeColumnIndex = parseInt(localStorage.getItem(\"signalCodeColumnIndex\")) || 0;\n        var bitLengthColumnIndex = parseInt(localStorage.getItem(\"bitLengthColumnIndex\")) || 1;\n        var valueTypeColumnIndex = parseInt(localStorage.getItem(\"valueTypeColumnIndex\")) || 2;\n        var scalingFactorColumnIndex = parseInt(localStorage.getItem(\"scalingFactorColumnIndex\")) || 3;\n\n        // #from RealtimeData.xsl\n        var rtdSignalCodeColumnIndex = parseInt(localStorage.getItem(\"rtdSignalCodeColumnIndex\")) || 0;\n        var rtdStartTimeColumnIndex = parseInt(localStorage.getItem(\"rtdStartTimeColumnIndex\")) || 1;\n        var rtdStartDataRowIndex = parseInt(localStorage.getItem(\"rtdStartDataRowIndex\")) || 5;\n\n        // to hold old value when user input value incorrect\n        var configRTD = {\n            signalCodeColumnIndex,\n            bitLengthColumnIndex,\n            valueTypeColumnIndex,\n            scalingFactorColumnIndex,\n\n            rtdSignalCodeColumnIndex,\n            rtdStartTimeColumnIndex,\n            rtdStartDataRowIndex,\n\n        }\n\n        function setConfigData(configData) {\n            this.configData = configData;\n        }\n        function getConfigData() {\n            return this.configData;\n        }\n\n        function setRealTimeData(realTimeData) {\n            this.realTimeData = realTimeData\n        }\n\n        function getRealTimeData() {\n            return this.realTimeData;\n        }\n        // util method\n        function columnToLetter(column) {\n            var temp, letter = '';\n            while (column > 0) {\n                temp = (column - 1) % 26;\n                letter = String.fromCharCode(temp + 65) + letter;\n                column = (column - temp - 1) / 26;\n            }\n            return letter;\n        }\n\n\n        function isBoolean(value) {\n            if (value == \"1\" || value == \"0\") {\n                return true;\n            }\n            return false;\n        }\n\n        function isNormalInteger(str) {\n            str = str.trim();\n            if (!str) {\n                return false;\n            }\n            str = str.replace(/^0+/, \"\") || \"0\";\n            var n = Math.floor(Number(str));\n            return n !== Infinity && String(n) === str && n >= 0;\n        }\n\n        function isFloat(input) {\n            if (!isNaN(parseFloat(input))) {\n                return true;\n            }\n            return false;\n        }\n        function isString(input) {\n            if (isBoolean(input)) {\n                return false;\n            } else if (isNormalInteger(input)) {\n                return false;\n            } else if (isFloat(parseFloat(input))) {\n                return false;\n            } else {\n                return true;\n            }\n        }\n        function processDataCsv(allText) {\n\n            var allTextLines = allText.split(/\\r\\n|\\n/);\n\n            var header = allTextLines[0].split(','); // get header\n\n            allTextLines.shift(); // delete header\n\n            var lines = [];\n            while (typeof allTextLines[0] !== \"undefined\") {\n                var line = allTextLines.shift();\n                var split = line.split(',');\n                lines.push({\n                    signalCode: split[configRTD.signalCodeColumnIndex],\n                    length: split[configRTD.bitLengthColumnIndex],\n                    type: split[configRTD.valueTypeColumnIndex],\n                    scalingFactor: split[configRTD.calingFactorColumnIndex]\n                })\n            }\n            lines.pop();  // delete undefine value end of line in csv\n\n            return lines\n        }\n\n        function processDataExcelToCsv(allText) {\n\n            var allTextLines = allText.split(/\\r\\n|\\n/);\n\n            var header = allTextLines[0].split(','); // get header\n            header = header.slice(configRTD.rtdStartTimeColumnIndex, header.length);\n\n\n            // allTextLines.shift(); // delete header\n            allTextLines = allTextLines.slice(configRTD.rtdStartDataRowIndex, allTextLines.length);\n            var lines = [];\n            console.log(configRTD);\n            while (typeof allTextLines[0] !== \"undefined\") {\n                var line = allTextLines.shift();\n                var split = line.split(',');\n\n                var rowData = {\n                    signalCode: split[configRTD.rtdSignalCodeColumnIndex]\n                }\n                header.forEach((v, i) => {\n                    rowData[v] = split[i + configRTD.rtdStartTimeColumnIndex]\n                        ? split[i + configRTD.rtdStartTimeColumnIndex]\n                        : undefined;\n                })\n                lines.push(rowData)\n            }\n            lines.pop();  // delete undefine value end of line in csv\n            // console.log(lines);\n            console.log(lines);\n            return lines\n        }\n\n        function checkRealtimData(configDataCsv, realTimeData) {\n            var data = realTimeData;\n            var config = configDataCsv;\n            console.log(configDataCsv);\n\n            // data = data.slice(rtdStartDataRowIndex - 3, data.length);\n\n            var keys = Object.keys(data[0]);\n            var indexOfSingalCode = keys.indexOf(\"signalCode\");\n\n            if (indexOfSingalCode > -1) { // delete key signal code\n                keys.splice(indexOfSingalCode, 1);\n            }\n            var errorList = [];\n            for (let i = 0; i < data.length; i++) {\n\n                let inforCurrentSignal = config.find((v) => v.signalCode == data[i].signalCode);\n\n                keys.forEach((v, col) => {\n                    switch (inforCurrentSignal.type) {\n                        case \"int\":\n\n                            if (data[i][v] != undefined) {\n                                var check = isNormalInteger(data[i][v]);\n\n                                if (check == false) {\n                                    errorList.push({\n                                        signalCode: inforCurrentSignal.signalCode,\n                                        payloadNo: v,\n                                        expectType: inforCurrentSignal.type,\n                                        value: data[i][v],\n                                        row: i + configRTD.rtdStartDataRowIndex + 1,\n                                        column: columnToLetter(col + 2),\n\n                                    })\n                                }\n                            }\n                            break;\n                        case \"boolean\":\n                            if (data[i][v] != undefined) {\n                                var check = isBoolean((data[i][v]));\n                                if (check == false) {\n                                    errorList.push({\n                                        signalCode: inforCurrentSignal.signalCode,\n                                        payloadNo: v,\n                                        expectType: inforCurrentSignal.type,\n                                        value: data[i][v],\n                                        row: i + configRTD.rtdStartDataRowIndex + 1,\n                                        column: columnToLetter(col + 2),\n\n                                    })\n                                }\n                            }\n                            break;\n                        case \"double\":\n\n                            if (data[i][v] != undefined) {\n                                var check = isFloat(parseFloat(data[i][v]));\n                                if (check == false) {\n                                    errorList.push({\n                                        signalCode: inforCurrentSignal.signalCode,\n                                        payloadNo: v,\n                                        expectType: inforCurrentSignal.type,\n                                        value: data[i][v],\n                                        row: i + configRTD.rtdStartDataRowIndex + 1,\n                                        column: columnToLetter(col + 2),\n\n                                    })\n                                }\n                            }\n                            break;\n                        case \"string\":\n                            if (data[i][v] != undefined) {\n                                var string = data[i][v];\n                                var checkType = isString(string);\n                                var checkLength = string.length * 8 == parseInt(inforCurrentSignal.length);\n\n                                if (checkLength == false || checkType == false) {\n                                    errorList.push({\n                                        signalCode: inforCurrentSignal.signalCode,\n                                        payloadNo: v,\n                                        expectType: `${inforCurrentSignal.type} ( ${inforCurrentSignal.length / 8})`,\n                                        value: `${data[i][v]} (${data[i][v].length})`,\n                                        row: i + configRTD.rtdStartDataRowIndex + 1,\n                                        column: columnToLetter(col + 2),\n\n                                    })\n                                }\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n\n                })\n            }\n            return errorList;\n        }\n\n        // end Util method\n\n        // handle method \n\n        var handleLabelConfigMQTT = (e) => {\n            // check if is open\n            if (formMQTTConfig.css(\"display\") == \"none\") {\n                formMQTTConfig.css(\"display\", \"\");\n            } else {\n\n                formMQTTConfig.css(\"display\", \"none\");\n            }\n            // classOptionalConfig.slideToggle(\"slow\");\n\n        }\n        var handleLableOptionalConfig = (e) => {\n            // check if is open\n            if (classOptionalConfig.css(\"display\") == \"none\") {\n                classOptionalConfig.css(\"display\", \"\");\n            } else {\n\n                classOptionalConfig.css(\"display\", \"none\");\n            }\n            // classOptionalConfig.slideToggle(\"slow\");\n\n        }\n        var handleInputFileCSV = function () {\n            let file = fileInputCSV.files[0];\n\n            // start reading the file. When it is done, calls the onload event defined above.\n\n            if (file) {\n                console.log(file);\n                var reader = new FileReader();\n                reader.readAsBinaryString(file);\n                reader.onload = function () {\n                    setConfigData(processDataCsv(reader.result));\n                    // document.getElementById('out').innerHTML = reader.result;\n                };\n            } else {\n                //to do with file does not exist\n            }\n\n\n        }\n        var handleInputFileExel = (oEvent) => {\n            // Get The File From The Input\n            var oFile = oEvent.target.files[0];\n            var sFilename = oFile.name;\n            // Create A File Reader HTML5\n            if (oFile) {\n                var reader = new FileReader();\n                // Tell JS To Start Reading The File.. You could delay this if desired\n                reader.readAsBinaryString(oFile);\n\n                // Ready The Event For When A File Gets Selected\n                reader.onload = function (e) {\n                    var data = e.target.result;\n                    var cfb = XLS.CFB.read(data, { type: 'binary' });\n                    var wb = XLS.parse_xlscfb(cfb);\n                    // Loop Over Each Sheet\n                    wb.SheetNames.forEach(function (sheetName) {\n                        // Obtain The Current Row As CSV\n                        var sCSV = XLS.utils.make_csv(wb.Sheets[sheetName]);\n                        var oJS = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName]);\n                        var sheetToJson = XLS.utils.sheet_to_row_object_array(wb.Sheets[sheetName])\n                        // realTimeData = oJS;\n\n                        setRealTimeData(processDataExcelToCsv(sCSV));\n                    });\n                };\n\n\n            } else {\n                //to do with file does not exsist\n            }\n\n        }\n        var handeCompareValue = (e) => {\n            idShowErrorList.html(\"\");\n            if (this.getConfigData().length === 0 || this.getRealTimeData().length === 0) {\n\n                // to do with file does not exist\n                if (this.getConfigData().length === 0) {\n\n                }\n                if (this.getRealTimeData().length === 0) {\n\n                }\n\n            } else {\n                var checkResult = checkRealtimData(this.getConfigData(), this.getRealTimeData());\n                if (checkResult.length !== 0) {\n                    var table = `\n                    <table class=\"table\">\n                    <thead class=\"thead-dark\">\n                        <tr>\n                            <th scope=\"col\">#</th>\n                            <th scope=\"col\">Signal Code</th>\n                            <th scope=\"col\">Payload No</th>\n                            <th scope=\"col\">Expect Type</th>\n                            <th scope=\"col\">Your Value</th>\n                            <th scope=\"col\">Position</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    `;\n                    let tableBody = \"\";\n                    checkResult.forEach((v, i) => {\n                        tableBody += `\n                    <tr >\n                        <td scope=\"row\">${i + 1}</td>\n                        <th >${v.signalCode}</th>\n                        <td>${v.payloadNo}</td>\n                        <td>${v.expectType}</td>\n                        <td>${v.value}</td>\n                        <td>${v.row} ${v.column}</td>\n                    </tr>\n                    `\n\n                    });\n                    table += tableBody + `   </tbody>\n                    </table>`;\n                    idShowErrorList.addClass(\"table-wrapper-scroll-y my-custom-scrollbar\")\n                    idShowErrorList.html(table);\n                }\n                else {\n                    let success = `<div class=\"alert alert-success text-center\" role=\"alert\"> Nothing wrong!</div>`\n                    idShowErrorList.removeClass(\"table-wrapper-scroll-y my-custom-scrollbar\")\n                    idShowErrorList.html(success);\n                }\n\n            }\n\n        }\n\n        function handleLableTestConfig(e) {\n            // check if is open\n            if (testFormId.css(\"display\") == \"none\") {\n                testFormId.css(\"display\", \"\");\n            } else {\n\n                testFormId.css(\"display\", \"none\");\n            }\n            // classOptionalConfig.slideToggle(\"slow\");\n        }\n        function handleLablePublishStatus() {\n            console.log(\"oke\");\n            // check if is open\n            if (publishStatusForm.css(\"display\") == \"none\") {\n                publishStatusForm.css(\"display\", \"\");\n            } else {\n\n                publishStatusForm.css(\"display\", \"none\");\n            }\n            // classOptionalConfig.slideToggle(\"slow\");\n        }\n        // end handle method\n        $(document).ready(function () {\n            //set value for config length\n            configLengthId.val(configLength);\n\n            //set value for config csv\n            idBitLengthColumnIndex.val(bitLengthColumnIndex);\n            idSignalCodeColumnIndex.val(signalCodeColumnIndex);\n            idValueTypeColumnIndex.val(valueTypeColumnIndex);\n            idScalingFactorColumnIndex.val(scalingFactorColumnIndex);\n\n            //set value for data excel\n            idRtdSignalCodeColumnIndex.val(rtdSignalCodeColumnIndex);\n            idRtdStartDataRowIndex.val(rtdStartDataRowIndex);\n            idRtdStartTimeColumnIndex.val(rtdStartTimeColumnIndex);\n\n\n            configLabel.on(\"click\", handleLableOptionalConfig);\n\n            labelMQTTConfig.on(\"click\", handleLabelConfigMQTT);\n\n            labelTestConfig.on(\"click\", handleLableTestConfig);\n\n            publishStatusLable.on(\"click\", handleLablePublishStatus)\n\n            // fileInputCSV.addEventListener('change', handleInputFileCSV);\n\n            // fileInputExcel.addEventListener('change', handleInputFileExel);\n\n            $(\"#compare\").click(handeCompareValue);\n\n            $('.wrap input').on('change keyup paste', function () {\n                var id = $(this).attr('id');\n                var value = parseInt(this.value);\n                configRTD[id] = value\n                localStorage.setItem(id, value || configRTD[id])\n            });\n\n            $('.wrap input').on('focusin', function () {\n                $(this).parent().find('label').addClass('active');\n            });\n\n            $('.wrap input').on('focusout', function () {\n                if (!this.value) {\n                    $(this).parent().find('label').removeClass('active');\n                }\n            });\n\n        });\n    </script>\n</body>\n\n</html>",
        "storeOutMessages": true,
        "fwdInMessages": false,
        "resendOnRefresh": true,
        "templateScope": "local",
        "x": 400,
        "y": 240,
        "wires": [
            [
                "151c0bbe4c63547d",
                "e9cd1a6a0dd9120a"
            ]
        ]
    },
    {
        "id": "12c844b80ae68f5a",
        "type": "mqtt out",
        "z": "91bc373f1990b000",
        "name": "",
        "topic": "",
        "qos": "2",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6e2ca8ae.a41228",
        "x": 890,
        "y": 200,
        "wires": []
    },
    {
        "id": "151c0bbe4c63547d",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "publish message",
        "func": "var zlib = context.global.zlib;\n/**\n * sleep process \n * @param {*} ms \n * @returns \n */\nfunction sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * get current date time\n * @returns date time format dd/mm/yyyy \n */\nfunction getCurrentDate() {\n    var myDate = new Date(Date.now());\n    return (myDate.getFullYear() + '-' + ('0' + (myDate.getMonth() + 1)).slice(-2) + '-' + ('0' + myDate.getDate()).slice(-2) + ' ' + myDate.getHours() + ':' + ('0' + (myDate.getMinutes())).slice(-2) + ':' + myDate.getSeconds() + \".\" + myDate.getMilliseconds());\n}\n\nlet decodeBase64 = (base64Code) => Buffer.from(base64Code, 'base64');\nlet encodeBase64 = (binBuffer) => Buffer.from(binBuffer).toString('base64');\n\nlet decompressGzip = (gzipData) => {\n    return new Int8Array(zlib.gunzipSync(gzipData, function (err, result) {\n        if (err) return reject(new Error(err))\n        return result;\n    }))\n}\n\nlet compressGzip = (binData) => {\n    return Buffer.from(zlib.gzipSync(binData))\n}\n\n/**\n * Convert long to byte array\n * @param {*} long \n * @returns \n */\nvar longToByteArray = function (/*long*/long) {\n    // we want to represent the input as a 6-bytes array\n    var byteArray = [0, 0, 0, 0, 0, 0];\n\n    for (var index = 0; index < byteArray.length; index++) {\n        var byte = long & 0xff;\n        byteArray[index] = byte;\n        long = (long - byte) / 256;\n    }\n\n    return new Int8Array(byteArray.reverse());\n};\n\n/**\n * Convert payload as original\n * @param {*} payload \n * @returns \n */\nlet convertPayLoadToBinary = (payload) => {\n    let gzipData = (decodeBase64(payload));\n\n    let binData = decompressGzip(gzipData);\n\n    return binData;\n}\n\n/**\n * Get current timestamp as byte buffer\n * @returns byte buffer of current time stamp\n */\nconst getCurrentTimestamp = () => {\n    return new Int8Array(longToByteArray(Date.now()));\n}\n\n\n/**\n * Create new base64 payload with current timestamp\n * @param {*} payload \n * @returns new gzip payload\n */\nconst newPayload = (payload) => {\n    let binaryData = convertPayLoadToBinary(payload);\n    let currentTimeStamp = getCurrentTimestamp();\n\n    // replace old time stamp\n    for (let i = 0; i < 6; i++) {\n        binaryData[i] = currentTimeStamp[i];\n    }\n\n    // compress binary data has been replaced timestamp to gizp format\n    let compressBintoGzip = compressGzip(binaryData);\n\n    return compressBintoGzip;\n}\nconst REAL_TIME_PAYLOAD_KEY = \"real_time_payload_key\";\n/**\n * Write payload to log array\n * @param {*} timestamp \n * @param {*} topic \n * @param {*} qos \n * @param {*} retain \n * @param {*} payload \n */\nfunction writeToLog(timestamp, topic, qos, retain, payload,type) {\n    var payloadArray = global.get(REAL_TIME_PAYLOAD_KEY) || \"\";\n  \n    payloadArray.push({\n        timestamp,\n        topic,\n        qos,\n        retain,\n        payload,\n        type\n    });\n    \n    global.set(REAL_TIME_PAYLOAD_KEY,payloadArray);\n\n}\n\nconst TIME_DELAY = (msg.timePublish < 200) ? 200 : msg.timePublish; // publish message 200 ms per time\nlet rtdData = msg.payload;\n\nlet payloadDelivered = 1;\n\nclearInterval(global.get(\"loop\")); // clear internal before\n\n/**\n * publish message to broker\n */\nconst publishMessage = () => {\n\n    let key = msg.key;\n    let payload = decodeBase64(rtdData[0][key]);\n\n    if (msg.isRealTime == true) {\n        payload = newPayload(payload)\n    }\n\n    msg.payload = payload; // publish first message directly\n    node.send(msg);\n    writeToLog(getCurrentDate(), msg.topic, msg.qos, msg.retain, payload,\"publish\");\n\n    if (rtdData.length > 1) {\n        var loop = setInterval(async () => {\n\n            try {\n                let payload = decodeBase64(rtdData[payloadDelivered][key]);\n\n                if (msg.isRealTime == true) {\n                    payload = newPayload(payload)\n                }\n                //publish only payload in json file\n                msg.payload = payload;\n                node.send(msg);\n                writeToLog(getCurrentDate(), msg.topic, msg.qos, msg.retain, payload,\"publish\");\n                payloadDelivered++;\n\n                // check all message is send\n                if (payloadDelivered >= rtdData.length) {\n                    if (msg.loop == true) { // if user turn on loop infinity\n                        clearInterval(loop);\n                        payloadDelivered = 1;\n                        await sleep(TIME_DELAY); // prepare for go back first message\n                        publishMessage(); // go back to first message\n                    } else {\n                        clearInterval(loop);\n                    }\n                }\n            } catch (e) {\n                node.warn(e);\n                clearInterval(loop);\n            }\n\n        }, TIME_DELAY);\n\n        global.set(\"loop\", loop); // save id internal to clear affter\n    }\n\n}\npublishMessage();\n\n\n\n\n// async function publishMessage(){\n\n//     while(payloadDelivered < rtdData.length){\n//         msg.payload= rtdData[payloadDelivered];\n//         node.send(msg);\n//         payloadDelivered++;\n//         if(payloadDelivered >= rtdData.length && msg.loop ==true){\n//             payloadDelivered =0;\n//         }\n//       await sleep(TIME_DELAY);\n//     }\n// }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 200,
        "wires": [
            [
                "12c844b80ae68f5a"
            ]
        ]
    },
    {
        "id": "add2c1eb58eeb3ba",
        "type": "comment",
        "z": "91bc373f1990b000",
        "name": "Before using you must make changes to settings.js - see the info bar for details.",
        "info": "//Connection to MQTT\nprocess.env.MQTT_PORT = 1883;\nprocess.env.MQTT_SERVER = \"192.168.0.102\";\nprocess.env.MQTT_USER=\"admin\";\nprocess.env.MQTT_PASS= \"admin\";\n\nprocess.env.CONFIG_PATH =__filename;\n\n/*========= Add this field inside module.exports*/\n\nfind the key named functionGlobalContext\n\nfunctionGlobalContext: {\nzlib:require('zlib')\n}\n",
        "x": 620,
        "y": 100,
        "wires": []
    },
    {
        "id": "7f2bc468f1adfedf",
        "type": "comment",
        "z": "91bc373f1990b000",
        "name": "Libraries using",
        "info": "1. node-red-dashboard (2.29.3)",
        "x": 420,
        "y": 140,
        "wires": []
    },
    {
        "id": "29caacf614ea6772",
        "type": "comment",
        "z": "91bc373f1990b000",
        "name": "url : http://localhost:1880/ui",
        "info": "",
        "x": 660,
        "y": 140,
        "wires": []
    },
    {
        "id": "1aa9d942d80e5beb",
        "type": "ui_toast",
        "z": "91bc373f1990b000",
        "position": "top right",
        "displayTime": "3",
        "highlight": "",
        "sendall": false,
        "outputs": 0,
        "ok": "OK",
        "cancel": "",
        "raw": false,
        "topic": "Delevering message",
        "name": "",
        "x": 950,
        "y": 280,
        "wires": []
    },
    {
        "id": "e9cd1a6a0dd9120a",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "Push notification",
        "func": "msg.topic =\"Delevering message\";\nmsg.payload = msg.payload.length + (msg.payload.length>1?\" records\":\"record\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "1aa9d942d80e5beb"
            ]
        ]
    },
    {
        "id": "a3aa6477c1756a34",
        "type": "inject",
        "z": "91bc373f1990b000",
        "name": "Get log",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 390,
        "y": 860,
        "wires": [
            [
                "50219a45f1ef5853"
            ]
        ]
    },
    {
        "id": "50219a45f1ef5853",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "",
        "func": "node.warn(global.get(\"real_time_payload_key\") || [])\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 860,
        "wires": [
            []
        ]
    },
    {
        "id": "5c3b40dc6624b29d",
        "type": "inject",
        "z": "91bc373f1990b000",
        "name": "Clear log",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payloadType": "date",
        "x": 400,
        "y": 920,
        "wires": [
            [
                "1e3bacac433aed9a"
            ]
        ]
    },
    {
        "id": "1e3bacac433aed9a",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "",
        "func": "global.set(\"real_time_payload_key\",[]);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "38c8f067bdb2579a",
        "type": "http in",
        "z": "91bc373f1990b000",
        "name": "",
        "url": "/realtime-status",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 420,
        "y": 540,
        "wires": [
            [
                "f3f4cb7cfb292850"
            ]
        ]
    },
    {
        "id": "f3f4cb7cfb292850",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "Handle Publish Realtime Status",
        "func": "/**\n * get current date time\n * @returns date time format dd/mm/yyyy \n */\nfunction getCurrentDate() {\n    var myDate = new Date(Date.now());\n    return (myDate.getFullYear() + '-' + ('0' + (myDate.getMonth() + 1)).slice(-2) + '-' + ('0' + myDate.getDate()).slice(-2) + ' ' + myDate.getHours() + ':' + ('0' + (myDate.getMinutes())).slice(-2) + ':' + myDate.getSeconds() + \".\" + myDate.getMilliseconds());\n}\nconst REAL_TIME_PAYLOAD_KEY = \"real_time_payload_key\";\n/**\n * Write payload to log array\n * @param {*} timestamp \n * @param {*} topic \n * @param {*} qos \n * @param {*} retain \n * @param {*} payload \n */\nfunction writeToLog(timestamp, topic, qos, retain, payload,type) {\n    var payloadArray = global.get(REAL_TIME_PAYLOAD_KEY) || [];\n  \n    payloadArray.push({\n        timestamp,\n        topic,\n        qos,\n        retain,\n        payload,\n        type\n    });\n    \n    global.set(REAL_TIME_PAYLOAD_KEY,payloadArray);\n\n}\n\nvar payload = msg.payload;\n\nvar qos = payload.qos;\nvar retain = payload.retain;\nvar topic = payload.topic;\nvar payload = payload.payload;\npayload.ts = Date.now();\n\nmsg.qos  = qos;\nmsg.retain = retain;\nmsg.topic = topic;\nmsg.payload = payload;\nwriteToLog(getCurrentDate(), msg.topic, msg.qos, msg.retain, payload,\"publish\");\nmsg.status =true;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 540,
        "wires": [
            [
                "e3c04e666132c937",
                "8db3eef244906a4d"
            ]
        ]
    },
    {
        "id": "e3c04e666132c937",
        "type": "http response",
        "z": "91bc373f1990b000",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1050,
        "y": 620,
        "wires": []
    },
    {
        "id": "6b299de3fb7f1245",
        "type": "catch",
        "z": "91bc373f1990b000",
        "name": "Catch Error Realtime status",
        "scope": [
            "38c8f067bdb2579a",
            "f3f4cb7cfb292850",
            "e3c04e666132c937",
            "8db3eef244906a4d"
        ],
        "uncaught": false,
        "x": 440,
        "y": 620,
        "wires": [
            [
                "5e7311e0f8de296a"
            ]
        ]
    },
    {
        "id": "5e7311e0f8de296a",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "Set 404",
        "func": "msg.payload.error = msg.error;\n// msg.statusCode = 404;//resource not found\nmsg.payload.status = false;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 620,
        "wires": [
            [
                "e3c04e666132c937"
            ]
        ]
    },
    {
        "id": "8db3eef244906a4d",
        "type": "mqtt out",
        "z": "91bc373f1990b000",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6e2ca8ae.a41228",
        "x": 1050,
        "y": 540,
        "wires": []
    },
    {
        "id": "43084aa8eabde909",
        "type": "http in",
        "z": "91bc373f1990b000",
        "name": "",
        "url": "/real-time-data.log",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 420,
        "y": 800,
        "wires": [
            [
                "e1d0b79c7fd9921d"
            ]
        ]
    },
    {
        "id": "e1d0b79c7fd9921d",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "handle get log realtime ",
        "func": "try{\n    var log = global.get(\"real_time_payload_key\") ||[];\n    msg.payload ={};\n    // msg.payload.status =true;\n    \n    let logString = \"\";\n    log.forEach((v,i)=>{\n        logString += `${v.timestamp} ${v.type} message topic: ${v.topic} payload : ${JSON.stringify(v.payload)} qos: ${v.qos} retain : ${v.retain} </br>  `;\n    })\n    \n    msg.payload = logString;\n    return msg;\n}catch(e){\n    msg.payload ={};\n    msg.payload.status = false;\n    \n    msg.payload.error = e + \"\";\n    return msg;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 800,
        "wires": [
            [
                "4c927ac66a9b9152"
            ]
        ]
    },
    {
        "id": "4c927ac66a9b9152",
        "type": "http response",
        "z": "91bc373f1990b000",
        "name": "response",
        "statusCode": "",
        "headers": {},
        "x": 1060,
        "y": 800,
        "wires": []
    },
    {
        "id": "6e8167d719402df2",
        "type": "comment",
        "z": "91bc373f1990b000",
        "name": "get log real time data",
        "info": "",
        "x": 420,
        "y": 760,
        "wires": []
    },
    {
        "id": "ded3784229bcf931",
        "type": "inject",
        "z": "91bc373f1990b000",
        "name": "",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "sdfdsf",
        "x": 390,
        "y": 700,
        "wires": [
            [
                "eef6c22d21dbc10c"
            ]
        ]
    },
    {
        "id": "eef6c22d21dbc10c",
        "type": "function",
        "z": "91bc373f1990b000",
        "name": "",
        "func": "node.warn((\"MQTT_PORT\"))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "a147f4b4b841f81e",
        "type": "inject",
        "z": "91bc373f1990b000",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "${MQTT_USER}",
        "payloadType": "env",
        "x": 420,
        "y": 420,
        "wires": [
            [
                "0a2586562e9c76bb"
            ]
        ]
    },
    {
        "id": "0a2586562e9c76bb",
        "type": "debug",
        "z": "91bc373f1990b000",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 650,
        "y": 420,
        "wires": []
    },
    {
        "id": "3d882eae.376e82",
        "type": "ui_group",
        "name": "Publish Message",
        "tab": "c6646016.404a",
        "order": 1,
        "disp": true,
        "width": "22",
        "collapse": true
    },
    {
        "id": "6e2ca8ae.a41228",
        "type": "mqtt-broker",
        "name": "",
        "broker": "${MQTT_SERVER}",
        "port": "${MQTT_PORT}",
        "clientid": "${MQTT_CLIENTID}",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": false,
        "birthTopic": "aemr_810001/disconnect",
        "birthQos": "2",
        "birthRetain": "false",
        "birthPayload": "connect",
        "birthMsg": {},
        "closeTopic": "aemr_810001/disconnect",
        "closeQos": "2",
        "closeRetain": "false",
        "closePayload": "disconnect",
        "closeMsg": {},
        "willTopic": "aemr_810001/disconnect",
        "willQos": "2",
        "willRetain": "false",
        "willPayload": "unexpected disconnection",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "c6646016.404a",
        "type": "ui_tab",
        "name": "3.4.10 OBS - Realtime Data",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    }
]